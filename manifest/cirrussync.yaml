apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: cirrus
  name: cirrus
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: cirrus-src
  labels:
    control-plane: cirrus
    src: cirrus
spec:
  capacity:
    storage: 40Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
  mountOptions:
    - loud
    - vers=4
  nfs:
    path: /cirrus
    server: 10.30.1.2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cirrus-src
  namespace: cirrus
  labels:
    control-plane: cirrus
spec:
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 40Gi
  storageClassName: ""
  selector:
    matchLabels:
      src: cirrus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    control-plane: cirrus
  name: sync
  namespace: system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    control-plane: cirrus
  name: cirrus-controller
rules:
- apiGroups:
  - cirrus.ocloud.dev
  resources:
  - dns
  - dhcp
  - chr
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    control-plane: cirrus
  name: cirrus-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cirrus-controller
subjects:
- kind: ServiceAccount
  name: sync
  namespace: cirrus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sync
  namespace: cirrus
  labels:
    control-plane: cirrus
    app: cirrus-sync
data:
  PORT_LISTENING_REST_API: "8080"
  GIT_API_URL: "http://172.21.253.130:9080/api/v4"
---
apiVersion: v1
kind: Service
metadata:
  name: sync-listener
  namespace: cirrus
  labels:
    control-plane: cirrus
    app: cirrus-sync
  annotations:
    metallb.universe.tf/address-pool: cirrus
spec:
  ipFamilyPolicy: RequireDualStack
  ipFamilies:
  - IPv6
  - IPv4
  ports:
  - name: sync
    port: 30222
    protocol: TCP
    targetPort: 8080
  selector:
    app: cirrus-sync
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sync
  namespace: cirrus
  labels:
    control-plane: cirrus
    app: cirrus-sync
spec:
  selector:
    matchLabels:
      control-plane: cirrus
      app: cirrus-sync
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: cirrus
        app: cirrus-sync
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution. 
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      # securityContext:
        # runAsNonRoot: true

        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - name: sync-manager
        image: polarbroadband/godev:0.2
        command: ['tail', '-f', '/dev/null']
        workingDir: /go/src/main
        volumeMounts:
        - name: cirrus-src
          subPath: sync
          mountPath: /go/src
        ports:
        - containerPort: 8080
        envFrom:
        - secretRef:
            name: sync
        env:
        - name: PORT_LISTENING_REST_API
          valueFrom:
            configMapKeyRef:
              name: sync
              key: PORT_LISTENING_REST_API
        - name: GIT_API_URL
          valueFrom:
            configMapKeyRef:
              name: sync
              key: GIT_API_URL
        securityContext:
          privileged: true
          # allowPrivilegeEscalation: false
          # capabilities:
          #   drop:
          #     - "ALL"

        # livenessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: 8081
        #   initialDelaySeconds: 15
        #   periodSeconds: 20
        # readinessProbe:
        #   httpGet:
        #     path: /readyz
        #     port: 8081
        #   initialDelaySeconds: 5
        #   periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      volumes:
        - name: cirrus-src
          persistentVolumeClaim:
            claimName: cirrus-src
      serviceAccountName: sync
      terminationGracePeriodSeconds: 10
